@App:name("GeoVelocity-Login")
@App:description("Description of the plan")
 
@Source(type = 'http-request', source.id='testsource', receiver.url="https://localhost:8280/GeoVelocity-Login/InputStream",@map(type='json', @attributes(messageId='trp:messageId', username='$.event.username', loginTime='$.event.loginTime',latitude='$.event.latitude' , longitude = '$.event.longitude')))
define stream InputStream (messageId string, username string, loginTime string,latitude double, longitude double);

@sink(type='http-response', source.id='testsource', message.id='{{messageId}}', @map(type='json'))
define stream OutputStream (messageId string, username string, velocity double);

define function timeGapFn[javascript] return int{
    var timeGap = Math.floor(parseInt(data[1])-parseInt(data[0]));
    return timeGap
    };

from every e1=InputStream -> e2=InputStream[e1.username == e2.username]<2:> within 10 min
select e1[last].messageId, e1[last].username, geo:distance(e1[last].latitude,e1[last].longitude,e2.latitude,e2.longitude) as distance,timeGapFn(e1[last].loginTime,e2.loginTime) as timeGap
insert into LoginDetailsStream;

from LoginDetailsStream
select messageId, username,ifThenElse(timeGap is null,0.0,distance/timeGap) as velocity
insert into OutputStream;


